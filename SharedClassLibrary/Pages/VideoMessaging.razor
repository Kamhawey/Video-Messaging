@page "/"
@using Video.Messaging.App.Models
@using Video.Messaging.App.Models.Enums
@using Video.Messaging.App.Services
@using SharedClassLibrary.Components
@inject IVideoService VideoService
@inject IVideoPlayerService VideoPlayerService

<PageTitle>Video Messaging</PageTitle>

<div class="video-messaging-container">
    <header class="app-header">
        <h1>Chat</h1>
        <div class="header-controls">
            <button class="display-mode-btn @(_displayMode == DisplayMode.Separate ? "active" : "")"
                    @onclick="() => SetDisplayMode(DisplayMode.Separate)">
                <i class="fas fa-th-list"></i>
                Separate
            </button>
            <button class="display-mode-btn @(_displayMode == DisplayMode.Together ? "active" : "")"
                    @onclick="() => SetDisplayMode(DisplayMode.Together)">
                <i class="fas fa-th"></i>
                Together
            </button>
        </div>
    </header>

    @if (_displayMode == DisplayMode.Separate)
    {
        <div class="message-type-selector">
            <button class="type-btn @(_currentMessageType == MessageType.Incoming ? "active" : "")"
                    @onclick="() => SetMessageType(MessageType.Incoming)">
                @if (_currentMessageType == MessageType.Incoming)
                {
                    <i class="fa-regular fa-comment"></i>
                }
                Incoming
            </button>
            <button class="type-btn @(_currentMessageType == MessageType.Outgoing ? "active" : "")"
                    @onclick="() => SetMessageType(MessageType.Outgoing)">
                @if (_currentMessageType == MessageType.Outgoing)
                {
                    <i class="fa-regular fa-comment"></i>
                }
                Outgoing
            </button>
        </div>

        <div class="message-content">
            @if (_currentMessageType == MessageType.Incoming)
            {
                @if (_incomingMessages.Any())
                {
                    @if (_selectedIncomingMessage != null)
                    {
                        <VideoPlayer VideoUrl="@_selectedIncomingMessage.VideoUrl"
                                     SenderName="@_selectedIncomingMessage.SenderName"
                                     OnPlaybackStateChanged="HandlePlaybackStateChanged" />
                    }
                }
                else
                {
                    <div class="no-message">
                        <img src="/images/no-incoming-message.png" alt="No Incoming Message" class="no-message-image" />
                        <p>No incoming messages</p>
                    </div>
                }
            }
            else
            {
                <VideoRecorder SenderName="Mohamed"
                               OnVideoRecorded="HandleVideoRecorded"
                               OnVideoSent="HandleVideoSent" />
            }
        </div>
    }
    else
    {
        <div class="together-mode">
            <div class="incoming-section">
                <h3>Incoming</h3>
                <div class="message-content">
                    @if (_incomingMessages.Any())
                    {
                        @if (_selectedIncomingMessage != null)
                        {
                            <VideoPlayer VideoUrl="@_selectedIncomingMessage.VideoUrl"
                                         SenderName="@_selectedIncomingMessage.SenderName"
                                         OnPlaybackStateChanged="HandlePlaybackStateChanged" />
                        }
                    }
                    else
                    {
                        <div class="no-message">
                            <img src="/images/no-incoming-message.png" alt="No Incoming Message" class="no-message-image" />
                            <p>No incoming messages</p>
                        </div>
                    }
                </div>
            </div>

            <div class="outgoing-section">
                <h3>Outgoing</h3>
                <div class="message-content">
                    <VideoRecorder SenderName="Mohamed"
                                   OnVideoRecorded="HandleVideoRecorded"
                                   OnVideoSent="HandleVideoSent" />
                </div>
            </div>
        </div>
    }
</div>

<style>
    .app-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #e0e0e0;
    }

    .header-controls {
        display: flex;
        gap: 0.5rem;
    }

    .display-mode-btn {
        padding: 0.5rem 1rem;
        border: 2px solid #e0e0e0;
        background: white;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.9rem;
    }

    .display-mode-btn:hover {
        background: #f5f5f5;
    }

    .display-mode-btn.active {
        background: #9780B8;
        color: white;
        border-color: #9780B8;
    }

    .together-mode {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        padding: 1rem;
        height: calc(100vh - 120px);
    }

    .incoming-section,
    .outgoing-section {
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 1rem;
        background: white;
        position: relative;
        top:5rem;
              height: 40rem;

    }
   
    .incoming-section h3,
    .outgoing-section h3 {
        margin: 0 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid #e0e0e0;
        color: #333;
    }

  .together-mode  .message-content{
        top:unset;
    }

    @@media (max-width: 768px) {
        .together-mode {
            grid-template-columns: 1fr;
            grid-template-rows: 1fr 1fr;
        }
        
        .header-controls {
            flex-direction: column;
            gap: 0.25rem;
        }
        
        .display-mode-btn {
            font-size: 0.8rem;
            padding: 0.4rem 0.8rem;
        }
    }
</style>

@code {
    public enum DisplayMode
    {
        Separate,
        Together
    }

    private DisplayMode _displayMode = DisplayMode.Separate;
    private MessageType _currentMessageType = MessageType.Incoming;
    private List<VideoMessage> _incomingMessages = new();
    private List<VideoMessage> _outgoingMessages = new();
    private VideoMessage? _selectedIncomingMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        var allMessages = await VideoService.GetVideoMessagesAsync();
        _incomingMessages = allMessages.Where(m => m.IsIncoming).ToList();
        _outgoingMessages = allMessages.Where(m => !m.IsIncoming).ToList();
        _selectedIncomingMessage = _incomingMessages.LastOrDefault();
        StateHasChanged();
    }

    private void SetDisplayMode(DisplayMode mode)
    {
        _displayMode = mode;
        StateHasChanged();
    }

    private void SetMessageType(MessageType type)
    {
        _currentMessageType = type;
        StateHasChanged();
    }

    private void SelectIncomingMessage(VideoMessage message)
    {
        _selectedIncomingMessage = message;
        StateHasChanged();
    }

    private async Task HandlePlaybackStateChanged(PlaybackState state)
    {
        // Handle playback state changes if needed
        await Task.CompletedTask;
    }

    private async Task HandleVideoRecorded(VideoMessage videoMessage)
    {
        // Handle video recorded event
        await Task.CompletedTask;
    }

    private async Task HandleVideoSent(VideoMessage videoMessage)
    {
        _outgoingMessages.Add(videoMessage);
        await LoadMessages(); // Refresh incoming messages to include the new video
        StateHasChanged();
    }
}